we are going to perform selection sort to sort the given list of elements
sorting is the process of arranging the given list of elements in a particular order
i.e; either ascending or descending order
There are two types of sortings
Internal sorting
External sorting
//INTERNAL SORTING://
a.insertion sort
b.selection sort
c.exchange sort
 1.bubble sort
 2.quick sort
d.distribution sort
 1.radix sort
//EXTERNAL SORTING//
 merge sort is an example for external sorting
// SELECTION SORT://
selection sort is based on algorithm
in which the list is divided into two parts
the sorted part is at left end
unsorted at right end
Initially the sorted part is empty
The unsorted part is entire list
The smallest element is selected
From the unsorted array
And swapped within the leftmost element
That element becomes a part of the sorted array
This process continues
Untill the list get sorted
**//HOW SELECTION SORT WORKS **//
consider the  following depicted array
AS an example
**/14 33 27 10 35 19 42 44**//
for the first positon
in the sorted list
the whole list is scanned
sequentially
The first position 
where 14 is placed presently
find 10 is the lowest value
**/14 33 27 10 35 19 42 44**/
so we can replace 
14 with 10
after one iteration
which happens to be the minimum value
in the list
appears in the first position 
of the sorted list
we start scaning the list
//14  33 27 10 35 19 42 44//

//10 14 19 27 33 35 42 44//

//10 33 27 14 35 19 42 44//

//10 33 27 14 35 19 42 44//

//10 14 27 33 35 19 42 44//

//10 33 27 14 35 19 42 44//

//10 14 27 33 35 19 42 44//

//10 14 19 33 35 27 42 44//
so we got the sorted list
**//ALGORITHM**//:
set min to location zero
set the minimum element in the list
swap with value at location min
increment point min to next element
repeat untill list is sorted

**//PSEUDOCODE**//
LIST:array of elements
n:size of list
int main()
            //in some programming languages
            //END or EXIT command is required 
              //but not in c
             //In the c language 
             //the program ends 
             //when it encounters the last brace 
            //in main() function//
{
          // curly braces are major part of c
          //an opening curiy brace "{"
          //must be always followed by a closing brace "}"
 init array[100],n,c,d,position,swap;
                                                  //int refers to integers
                                                  //an array is a collection of similar data items
                                                  //n refers to number of items 
                                                  //c is the preceeding position of d
                                                  //swap refers to replacement of one element with other element//
printf("enter number of elements\n")
                                                   //printf provides formatted output
                                                   //\n says go to the new line//
scanf("%d",&n);
                                          //scanf reads the elements
                                          //& is used to store//
 for i=1 to n-1
 min=i
                                     //check the elements to minimum//
if list[j]<list[min] 
then
min=j
                            //swap the elements//
  swap list[min] and list[j]                
end
/***/PROGRAM**//
# include <stdio.h>
                                  //this is header file in your program
                                  //by including it with the c preprocessing
                                  //derective # include stdio.h  refers to for certain input
                                  //there will be output with extension .h//
             //scanf provides a formatted input used for reading//
 printf("enter %d integer/n",n);
 for(c=o;c<n;c++);
                //for is used for repetition of statements or a group of conditions//
  for(initialization;condition;increment or decrement operation)
                                                                                          //for loop should not teriminate with;//
    scanf("%d",&array[c]);
    for(c=0;c<n-1;c++)
                                                                  //any number of loops occur inside one loop//
    {
    position=c;
    for(d=c+1;d<n;d++)
    {
    if(array[position]>array[d])
                                                   //if the statement is true the statement get executed//
        position=d;
        }
        if(position!=c)             //swap array[c] and array[position]//
        {
        swap=array[c];
        array[c]=array[position];
        array[position]=swap;
        }
        }
        printf("sorted list in ascending order:\n");
        for(c=0;c<n;c++)
        printf("%d\n",array[c]);
        return 0;
        }
                                                        //return is used toreturn an integer value
                                                        //return 0 is reffered to as success//
        }
        
        ************************************************************
        **//APPLICATIONS**//:
       * complexity is O(n^2) so that it is used widely
       * It is not difficult to analyze compared to other sortings
       * simple calculations 
       * small enough
        
        
    
